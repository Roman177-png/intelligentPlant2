[
    {
        "id": "2c9593d1d1b303dd",
        "type": "tab",
        "label": "pdf_raport",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "52b2a8c195842fb5",
        "type": "ui_form",
        "z": "2c9593d1d1b303dd",
        "name": "",
        "label": "",
        "group": "21d989ee5d860ab1",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Raport od:",
                "value": "date_from",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Raport do:",
                "value": "date_to",
                "type": "date",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "date_from": "",
            "date_to": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 90,
        "y": 200,
        "wires": [
            [
                "90e3ca521174957b",
                "145a67f417d4b60c"
            ]
        ]
    },
    {
        "id": "1a1f03b088bec22a",
        "type": "mysql",
        "z": "2c9593d1d1b303dd",
        "mydb": "a94c2155e352c42e",
        "name": "MySQL Database",
        "x": 530,
        "y": 380,
        "wires": [
            [
                "0d4f48bcffa8e16d",
                "d458ca39e270100c",
                "5537174064701d8e",
                "f194953f81d7dffd",
                "fa15ff299d7a3497",
                "61acd3f740057cec",
                "df4408f60f1794b3",
                "50a2697db5d83926",
                "1b22f90ac5153c0b",
                "10bbbf3fda785722",
                "2db0ec41edce7e98",
                "6209b2368bd55c0c",
                "cc18f87b97f833f6"
            ]
        ]
    },
    {
        "id": "90e3ca521174957b",
        "type": "function",
        "z": "2c9593d1d1b303dd",
        "name": "sqlQuery - date_from & date_to",
        "func": "// Pobierz daty z payload\nconst date_from = msg.payload.date_from;\nconst date_to = msg.payload.date_to;\n\n// Utwórz obiekty daty\nconst dateFromObject = new Date(date_from);\nconst dateToObject = new Date(date_to);\n\n// Uzyskaj poszczególne komponenty daty\nconst yearFrom = dateFromObject.getFullYear();\nconst monthFrom = dateFromObject.getMonth() + 1; // Dodajemy 1, ponieważ miesiące są liczone od 0 do 11\nconst dayFrom = dateFromObject.getDate();\n\nconst yearTo = dateToObject.getFullYear();\nconst monthTo = dateToObject.getMonth() + 1;\nconst dayTo = dateToObject.getDate();\n\n// Sformatuj daty w oczekiwanym formacie\nconst formattedDateFrom = `${yearFrom}.${monthFrom < 10 ? '0' : ''}${monthFrom}.${dayFrom < 10 ? '0' : ''}${dayFrom}`;\nconst formattedDateTo = `${yearTo}.${monthTo < 10 ? '0' : ''}${monthTo}.${dayTo < 10 ? '0' : ''}${dayTo}`;\n\n// Utwórz zapytanie SQL z uwzględnieniem zakresu dat\nconst sqlQuery = `SELECT name,timeWatering,temperature, pressure, humidity, moilSoilture, date FROM plant_data WHERE STR_TO_DATE(date, '%Y-%m-%d') >= STR_TO_DATE('${formattedDateFrom}', '%Y.%m.%d') AND STR_TO_DATE(date, '%Y-%m-%d') <= STR_TO_DATE('${formattedDateTo}', '%Y.%m.%d')`;\n\n// Przypisz zapytanie do payload, aby mogło być przekazane do kolejnych węzłów\nmsg.topic = sqlQuery;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 380,
        "wires": [
            [
                "1a1f03b088bec22a"
            ]
        ]
    },
    {
        "id": "145a67f417d4b60c",
        "type": "function",
        "z": "2c9593d1d1b303dd",
        "name": "function 59",
        "func": "// Pobierz daty z payload\nconst date_from = msg.payload.date_from;\nconst date_to = msg.payload.date_to;\n\n// Utwórz obiekty daty\nconst dateFromObject = new Date(date_from);\nconst dateToObject = new Date(date_to);\n\n// Uzyskaj poszczególne komponenty daty\nconst yearFrom = dateFromObject.getFullYear();\nconst monthFrom = dateFromObject.getMonth() + 1; // Dodajemy 1, ponieważ miesiące są liczone od 0 do 11\nconst dayFrom = dateFromObject.getDate();\n\nconst yearTo = dateToObject.getFullYear();\nconst monthTo = dateToObject.getMonth() + 1;\nconst dayTo = dateToObject.getDate();\n\n// Sformatuj daty w oczekiwanym formacie\nconst formattedDateFrom = `${yearFrom}_${monthFrom < 10 ? '0' : ''}${monthFrom}_${dayFrom < 10 ? '0' : ''}${dayFrom}`;\nconst formattedDateTo = `${yearTo}_${monthTo < 10 ? '0' : ''}${monthTo}_${dayTo < 10 ? '0' : ''}${dayTo}`;\n\n// msg.payload.date_from = formattedDateFrom;\n// msg.payload.date_to = formattedDateTo;\nmsg.payload = \"<h1>Raport dla roślinki od \" + formattedDateFrom + \" do\" + formattedDateTo+\"</h1>\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 740,
        "wires": [
            [
                "7ccd9012d6c69821"
            ]
        ]
    },
    {
        "id": "0d4f48bcffa8e16d",
        "type": "ui_table",
        "z": "2c9593d1d1b303dd",
        "group": "7f25d72094a43b2c",
        "name": "",
        "order": 1,
        "width": 18,
        "height": 12,
        "columns": [
            {
                "field": "name",
                "title": "Name",
                "width": "90",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "timeWatering",
                "title": "lastWatering",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "temperature",
                "title": "Temperature",
                "width": "140",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "pressure",
                "title": "Pressure",
                "width": "110",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "humidity",
                "title": "Humidity",
                "width": "110",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "moilSoilture",
                "title": "SoilMoilture",
                "width": "140",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "date",
                "title": "Date",
                "width": "180",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 810,
        "y": 460,
        "wires": []
    },
    {
        "id": "5164d619ee1e5b63",
        "type": "change",
        "z": "2c9593d1d1b303dd",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 720,
        "wires": [
            [
                "7ccd9012d6c69821"
            ]
        ]
    },
    {
        "id": "7ccd9012d6c69821",
        "type": "join",
        "z": "2c9593d1d1b303dd",
        "name": "",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 450,
        "y": 1020,
        "wires": [
            [
                "032609e8873f91fd",
                "034d59bc54cff204"
            ]
        ]
    },
    {
        "id": "3254fa3225ec8824",
        "type": "function",
        "z": "2c9593d1d1b303dd",
        "name": "function 61",
        "func": "let r = msg.payload;\nlet serie = [\"temperature\"];\nlet data =[r.map(v => ({\n    \"x\": v.date,\n    \"y\": parseFloat(v.temperature)\n}))];\n\n\nmsg.payload = [{ \"series\": serie, \"data\": data }];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 300,
        "wires": [
            [
                "3e2ef5ed94882be9"
            ]
        ]
    },
    {
        "id": "3e2ef5ed94882be9",
        "type": "ui_chart",
        "z": "2c9593d1d1b303dd",
        "name": "",
        "group": "7f25d72094a43b2c",
        "order": 14,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 950,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "d458ca39e270100c",
        "type": "change",
        "z": "2c9593d1d1b303dd",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "topic",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 380,
        "wires": [
            [
                "3254fa3225ec8824"
            ]
        ]
    },
    {
        "id": "28a60d2f49599ba4",
        "type": "file",
        "z": "2c9593d1d1b303dd",
        "name": "",
        "filename": ".\\raporttest.pdf",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1280,
        "y": 2140,
        "wires": [
            [
                "dcb6ec47acb366fe"
            ]
        ]
    },
    {
        "id": "f9f9912ba859f3ba",
        "type": "tableify",
        "z": "2c9593d1d1b303dd",
        "name": "",
        "before": "Statystyki dla pomiarów",
        "after": "Następnie przedstawione zostaną wykresy",
        "tableStyle": "",
        "theadStyle": "",
        "tbodyStyle": "",
        "trStyle": "",
        "tdStyle": "",
        "x": 440,
        "y": 560,
        "wires": [
            [
                "5164d619ee1e5b63"
            ]
        ]
    },
    {
        "id": "f22f30378f3d881f",
        "type": "chart-image",
        "z": "2c9593d1d1b303dd",
        "name": "",
        "width": 500,
        "height": 300,
        "x": 730,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "e1dd3b53a4e0c2a5",
        "type": "chart-image",
        "z": "2c9593d1d1b303dd",
        "name": "",
        "width": "500",
        "height": "500",
        "x": 530,
        "y": 2000,
        "wires": [
            [
                "c2f2f6271a1454cb"
            ]
        ]
    },
    {
        "id": "ae7e79a254ed6628",
        "type": "html-to-pdf",
        "z": "2c9593d1d1b303dd",
        "name": "",
        "format": "A4",
        "zoom": 100,
        "orientation": "Portrait",
        "width": "",
        "height": "",
        "widthUnit": "cm",
        "heightUnit": "cm",
        "marginTop": 1,
        "marginLeft": 1,
        "marginBottom": 1,
        "marginRight": 1,
        "marginTopUnits": "cm",
        "marginLeftUnits": "cm",
        "marginBottomUnits": "cm",
        "marginRightUnits": "cm",
        "omitBackground": false,
        "printGraphics": true,
        "x": 1130,
        "y": 2020,
        "wires": [
            [
                "28a60d2f49599ba4"
            ]
        ]
    },
    {
        "id": "156b4eb7fc9691a6",
        "type": "ui_template",
        "z": "2c9593d1d1b303dd",
        "group": "21d989ee5d860ab1",
        "name": "Display Image",
        "order": 5,
        "width": 17,
        "height": 9,
        "format": "<img width=\"500\" height=\"500\" alt=\"image\" src=\"data:image/jpg;base64,{{msg.payload}}\"/>\n\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 920,
        "y": 2020,
        "wires": [
            []
        ]
    },
    {
        "id": "0451ca5e4b897d11",
        "type": "function",
        "z": "2c9593d1d1b303dd",
        "name": "function 63",
        "func": "let tabela = msg.payload[0];\nlet tabela2 = msg.payload[6];\nlet wykresy =\n        \"<h1>Wykresy:</h1>\" +\n        ' <img width=\"500\" height=\"500\" alt=\"image\" src=\"data:image/jpg;base64,' +\n        msg.payload[1] +\n        ' \" />' +\n        '<div style=\"page-break-before:always\">&nbsp;</div>' +\n        ' <img width=\"500\" height=\"500\" alt=\"image\" src=\"data:image/jpg;base64,' +\n        msg.payload[3] +\n        ' \" />' +\n        '<div style=\"page-break-before:always\">&nbsp;</div>' +\n        ' <img width=\"500\" height=\"500\" alt=\"image\" src=\"data:image/jpg;base64,' +\n        msg.payload[4] +\n        ' \" />' +\n        '<div style=\"page-break-before:always\">&nbsp;</div>' +\n        ' <img width=\"500\" height=\"500\" alt=\"image\" src=\"data:image/jpg;base64,' +\n        msg.payload[5] +\n        ' \" />' +\n        '<div style=\"page-break-before:always\">&nbsp;</div>' +\n        \"<h1>Bargraph'y:</h1>\" +\n        ' <img width=\"500\" height=\"500\" alt=\"image\" src=\"data:image/jpg;base64,' +\n        msg.payload[2] +\n        ' \" />' +\n        // '<div style=\"page-break-before:always\">&nbsp;</div>' +\n        // ' <img width=\"500\" height=\"500\" alt=\"image\" src=\"data:image/jpg;base64,' +\n        // msg.payload[7] +\n        //  ' \" />' +\n         '<div style=\"page-break-before:always\">&nbsp;</div>' +\n         ' <img width=\"500\" height=\"500\" alt=\"image\" src=\"data:image/jpg;base64,' +\n         msg.payload[8] +\n         ' \" />' +\n         '<div style=\"page-break-before:always\">&nbsp;</div>' +\n ' <img width=\"500\" height=\"500\" alt=\"image\" src=\"data:image/jpg;base64,' +\n        msg.payload[9]\n         +\n        ' \" />';\nmsg.payload = tabela + wykresy + \"<br>\" + tabela2;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1900,
        "wires": [
            [
                "ae7e79a254ed6628",
                "62c7db8e52f04fba"
            ]
        ]
    },
    {
        "id": "62c7db8e52f04fba",
        "type": "debug",
        "z": "2c9593d1d1b303dd",
        "name": "debug 23",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 1820,
        "wires": []
    },
    {
        "id": "5537174064701d8e",
        "type": "function",
        "z": "2c9593d1d1b303dd",
        "name": "Temperature Chart",
        "func": "function getGetOrdinal(n) {\n    var s=[\"th\",\"st\",\"nd\",\"rd\"],\n    v=n%100;\n    return n+(s[(v-20)%10]||s[v]||s[0]);\n }\nlet r = msg.payload;\n\nlet temp = [r.map(v => parseFloat(v.temperature))];\nlet timeV = [r.map(v =>v.date)];\n    \n\n\n\nvar dL = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nvar dS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nvar mL = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nvar mS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n\nlet now = new Date();\n\n// Create the chart object\nlet m = {\n    type: 'line',\n    options: {\n        title: {\n            display: true,\n            text: 'Wykres temperatury w czasie'\n        },\n        legend: {\n            display: true,\n        },\n        chartArea: {\n            backgroundColor: 'rgba(255, 255, 255, 0.9)',\n            borderColor: 'rgba(0, 0, 0, 0.1)',\n            borderWidth: 1,\n        },\n        scales: {\n            xAxes: [{\n                scaleLabel: {\n                    display: true,\n                    labelString: 'Czas'\n                },\n                ticks: {\n                    autoSkip: true,\n                    maxTicksLimit: 10\n                }\n            }],\n            yAxes: [{\n                scaleLabel: {\n                    display: true,\n                    labelString: 'Temperatura'\n                }\n            }]\n        },\n        plugins: {\n            datalabels: {\n                display: false,\n                backgroundColor: 'whitesmoke',\n                borderRadius: 1,\n                padding: 1,\n                align: 'right',\n                anchor: function (context) {\n                    if (context.dataIndex == context.dataset.data.length - 1) {\n                        return 'center';\n                    } else {\n                        return 'end';\n                    }\n                },\n                offset: 8,\n                formatter: function (value) {\n                    return value > 0 ? value.toLocaleString() : '';\n                }\n            }\n        }\n    },\n    data: {\n        labels: [],\n        datasets: [\n            {\n                label: \"Sample data\",\n                borderColor: 'rgba(57,97,184,0.8)',\n                borderWidth: 2,\n                fill: false,\n                data: [],\n                pointRadius: 2,\n            }\n        ]\n    }\n};\n\n\nfor (let i = 0; i < temp[0].length; i = i + (temp[0].length/100)) {\n    \n    let idx = parseInt(i)\n    console.log(idx);\n    m.data.datasets[0].data.push(temp[0][idx]);\n    // Zamień spację na literę \"T\" i dodaj sufiks \"Z\"\n    let str_date = timeV[0][idx].replace(\" \", \"T\") + \"+01:00\";\n\n    // Utwórz obiekt Date na podstawie przekształconego stringa\n    let dateV = new Date(str_date);\n    m.data.labels.push(dateV.toLocaleString()) }\n\nmsg.payload = m;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1620,
        "wires": [
            [
                "e1dd3b53a4e0c2a5"
            ]
        ]
    },
    {
        "id": "f194953f81d7dffd",
        "type": "function",
        "z": "2c9593d1d1b303dd",
        "name": "function 64",
        "func": "\nlet r = msg.payload;\n\nlet wilgotnoscPowietrza = r.map(v => parseFloat(v.humidity));\n//let wilgotnoscPowietrza = [50, 60, 70, 75, 80, 85, 90, 92, 95, 98, 100];\n\n// Funkcja do grupowania danych w zakresy\nfunction groupData(data, rangeSize) {\n    let groupedData = {};\n    data.forEach(value => {\n        let rangeKey = Math.floor(value / rangeSize) * rangeSize;\n        if (!groupedData[rangeKey]) {\n            groupedData[rangeKey] = 0;\n        }\n        groupedData[rangeKey]++;\n    });\n    return groupedData;\n}\nlet size = Math.floor((Math.max(...wilgotnoscPowietrza) - Math.min(...wilgotnoscPowietrza)) / 5);\n\n\n// Grupowanie danych w zakresy o szerokości 10\nlet groupedData = groupData(wilgotnoscPowietrza, size);\n\n// Konwersja danych do formatu zrozumiałego dla Chart.js\n\nlet labels = Object.keys(groupedData).map(\n    (rangeKey) => `${parseInt(rangeKey)}-${(parseInt(rangeKey) + parseInt(size))}`\n);\n\nlet data = Object.values(groupedData);\n\n// Inicjalizacja obiektu wykresu kolumnowego\nlet histogramChart = {\n    type: 'bar',\n    data: {\n        labels: labels,\n        datasets: [{\n            label: 'Wilgotność powietrza',\n            data: data,\n            backgroundColor: 'rgba(57,97,184,0.8)',\n        }]\n    },\n    options: {\n        title: {\n            display: true,\n            text: 'Histogram Wilgotności Powietrza'\n        },\n        scales: {\n            xAxes: [{\n                scaleLabel: {\n                    display: true,\n                    labelString: 'Zakresy wilgotności'\n                }\n            }],\n            yAxes: [{\n                scaleLabel: {\n                    display: true,\n                    labelString: 'Liczba wystąpień'\n                },\n                ticks: {\n                    beginAtZero: true,\n                    stepSize: 1 // Ustawienie kroku osi Y na 1\n                }\n            }]\n        }\n    }\n};\nmsg.payload = histogramChart\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1520,
        "wires": [
            [
                "fc8f597ba52944cc"
            ]
        ]
    },
    {
        "id": "fc8f597ba52944cc",
        "type": "chart-image",
        "z": "2c9593d1d1b303dd",
        "name": "",
        "width": 500,
        "height": "500",
        "x": 950,
        "y": 1480,
        "wires": [
            [
                "30888136c5eb377c"
            ]
        ]
    },
    {
        "id": "b42a90145617ca1e",
        "type": "ui_template",
        "z": "2c9593d1d1b303dd",
        "group": "21d989ee5d860ab1",
        "name": "Display Image22",
        "order": 6,
        "width": 17,
        "height": 9,
        "format": "<img width=\"500\" height=\"500\" alt=\"image\" src=\"data:image/jpg;base64,{{msg.payload}}\"/>\n\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1170,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "034d59bc54cff204",
        "type": "join",
        "z": "2c9593d1d1b303dd",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "10",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 730,
        "y": 1780,
        "wires": [
            [
                "0451ca5e4b897d11"
            ]
        ]
    },
    {
        "id": "fa15ff299d7a3497",
        "type": "function",
        "z": "2c9593d1d1b303dd",
        "name": "function 65",
        "func": "// Pobierz wyniki zapytania SQL\nconst results = msg.payload;\n\n// Inicjalizuj zmienne do przechowywania maksymalnych, minimalnych i średnich wartości\nlet maxTemperature = Number.MIN_SAFE_INTEGER;\nlet minTemperature = Number.MAX_SAFE_INTEGER;\nlet sumTemperature = 0.0;\n\nlet maxHumidity = Number.MIN_SAFE_INTEGER;\nlet minHumidity = Number.MAX_SAFE_INTEGER;\nlet sumHumidity = 0.0;\n\n\nlet maxS = Number.MIN_SAFE_INTEGER;\nlet minS = Number.MAX_SAFE_INTEGER;\nlet sumS = 0;\n\nlet maxP = Number.MIN_SAFE_INTEGER;\nlet minP = Number.MAX_SAFE_INTEGER;\nlet sumP = 0.0;\nlet licznik = 0.0;\n// Przetwarzaj wyniki, znajdując maksymalne, minimalne i obliczając sumy\nresults.forEach(result => {\n    maxTemperature = Math.max(maxTemperature, result.temperature);\n    minTemperature = Math.min(minTemperature, result.temperature);\n    sumTemperature += parseFloat(result.temperature);\n    licznik +=1.0\n    maxHumidity = Math.max(maxHumidity, result.humidity);\n    minHumidity = Math.min(minHumidity, result.humidity);\n    sumHumidity += parseFloat(result.humidity);\n\n    maxS = Math.max(maxS, result.moilSoilture);\n    minS = Math.min(minS, result.moilSoilture);\n    sumS += parseInt(result.moilSoilture);\n\n    maxP = Math.max(maxP, result.pressure);\n    minP = Math.min(minP, result.pressure);\n    sumP += parseFloat(result.pressure);\n});\n\n// Oblicz średnie wartości\nlet avgTemperature = sumTemperature / licznik;\nlet avgHumidity = sumHumidity / licznik;\nlet avgS = sumS / licznik;\nlet avgP = sumP / licznik;\n\n// Utwórz nowe właściwości msg z nazwami kolumn i wartościami\nmsg.payload = \n    [{ type: \"max\", temp: maxTemperature, humidity: maxHumidity,pressure: maxP , soilMoisture: maxS  },\n    { type: \"min\", temp: minTemperature, humidity: minHumidity, pressure: minP, soilMoisture: minS  },\n    { type: \"avg\", temp: avgTemperature, humidity: avgHumidity, pressure: avgP, soilMoisture: avgS } ]\n    \n;\n\nconsole.log(\"TESST\", licznik,\"TESTTT\", sumP)\n\n\n// Przekazanie nowych danych do bloczku tableify\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 480,
        "wires": [
            [
                "f9f9912ba859f3ba",
                "29b8f4e6252ff8a9"
            ]
        ]
    },
    {
        "id": "61acd3f740057cec",
        "type": "debug",
        "z": "2c9593d1d1b303dd",
        "name": "debug 24",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 560,
        "wires": []
    },
    {
        "id": "29b8f4e6252ff8a9",
        "type": "debug",
        "z": "2c9593d1d1b303dd",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 660,
        "wires": []
    },
    {
        "id": "032609e8873f91fd",
        "type": "change",
        "z": "2c9593d1d1b303dd",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload2",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "c2f2f6271a1454cb",
        "type": "base64",
        "z": "2c9593d1d1b303dd",
        "name": "Encode",
        "action": "",
        "property": "payload",
        "x": 700,
        "y": 1980,
        "wires": [
            [
                "156b4eb7fc9691a6",
                "034d59bc54cff204"
            ]
        ]
    },
    {
        "id": "30888136c5eb377c",
        "type": "base64",
        "z": "2c9593d1d1b303dd",
        "name": "Encode",
        "action": "",
        "property": "payload",
        "x": 760,
        "y": 1640,
        "wires": [
            [
                "b42a90145617ca1e",
                "034d59bc54cff204"
            ]
        ]
    },
    {
        "id": "df4408f60f1794b3",
        "type": "tableify",
        "z": "2c9593d1d1b303dd",
        "name": "",
        "before": "Statystyki dla pomiarów",
        "after": "",
        "tableStyle": "",
        "theadStyle": "",
        "tbodyStyle": "",
        "trStyle": "",
        "tdStyle": "",
        "x": 560,
        "y": 460,
        "wires": [
            [
                "1af1489eacc0f3ef"
            ]
        ]
    },
    {
        "id": "1af1489eacc0f3ef",
        "type": "delay",
        "z": "2c9593d1d1b303dd",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 500,
        "y": 1540,
        "wires": [
            [
                "034d59bc54cff204"
            ]
        ]
    },
    {
        "id": "151c2aaf2ecae103",
        "type": "chart-image",
        "z": "2c9593d1d1b303dd",
        "name": "",
        "width": "500",
        "height": "500",
        "x": 530,
        "y": 2080,
        "wires": [
            [
                "74567574a427b3ea"
            ]
        ]
    },
    {
        "id": "74567574a427b3ea",
        "type": "base64",
        "z": "2c9593d1d1b303dd",
        "name": "Encode",
        "action": "",
        "property": "payload",
        "x": 700,
        "y": 2060,
        "wires": [
            [
                "f7aaff8bb9797946"
            ]
        ]
    },
    {
        "id": "14ab2d3ed2b8dee3",
        "type": "chart-image",
        "z": "2c9593d1d1b303dd",
        "name": "",
        "width": "500",
        "height": "500",
        "x": 530,
        "y": 2180,
        "wires": [
            [
                "9a1525742d23f2e7"
            ]
        ]
    },
    {
        "id": "9a1525742d23f2e7",
        "type": "base64",
        "z": "2c9593d1d1b303dd",
        "name": "Encode",
        "action": "",
        "property": "payload",
        "x": 700,
        "y": 2160,
        "wires": [
            [
                "e4b1ac83bcc34645"
            ]
        ]
    },
    {
        "id": "6461036896d6f20f",
        "type": "chart-image",
        "z": "2c9593d1d1b303dd",
        "name": "",
        "width": "500",
        "height": "500",
        "x": 530,
        "y": 2260,
        "wires": [
            [
                "cae0c6072841a163"
            ]
        ]
    },
    {
        "id": "cae0c6072841a163",
        "type": "base64",
        "z": "2c9593d1d1b303dd",
        "name": "Encode",
        "action": "",
        "property": "payload",
        "x": 700,
        "y": 2240,
        "wires": [
            [
                "05cc1642e961a503"
            ]
        ]
    },
    {
        "id": "50a2697db5d83926",
        "type": "function",
        "z": "2c9593d1d1b303dd",
        "name": "Preasure Chart",
        "func": "function getGetOrdinal(n) {\n    var s=[\"th\",\"st\",\"nd\",\"rd\"],\n    v=n%100;\n    return n+(s[(v-20)%10]||s[v]||s[0]);\n }\nlet r = msg.payload;\n\nlet temp = [r.map(v => parseFloat(v.pressure))];\nlet timeV = [r.map(v =>v.date)];\n    \n\n\n\nvar dL = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nvar dS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nvar mL = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nvar mS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n\nlet now = new Date();\n\n// Create the chart object\nlet m = {\n    type: 'line',\n    options: {\n        title: {\n            display: true,\n            text: 'Wykres cisnienia w czasie'\n        },\n        legend: {\n            display: true,\n        },\n        chartArea: {\n            backgroundColor: 'rgba(255, 255, 255, 0.9)',\n            borderColor: 'rgba(0, 0, 0, 0.1)',\n            borderWidth: 1,\n        },\n        scales: {\n            xAxes: [{\n                scaleLabel: {\n                    display: true,\n                    labelString: 'Czas'\n                },\n                ticks: {\n                    autoSkip: true,\n                    maxTicksLimit: 10\n                }\n            }],\n            yAxes: [{\n                scaleLabel: {\n                    display: true,\n                    labelString: 'Cisnienie hPa'\n                }\n            }]\n        },\n        plugins: {\n            datalabels: {\n                display: false,\n                backgroundColor: 'whitesmoke',\n                borderRadius: 1,\n                padding: 1,\n                align: 'right',\n                anchor: function (context) {\n                    if (context.dataIndex == context.dataset.data.length - 1) {\n                        return 'center';\n                    } else {\n                        return 'end';\n                    }\n                },\n                offset: 8,\n                formatter: function (value) {\n                    return value > 0 ? value.toLocaleString() : '';\n                }\n            }\n        }\n    },\n    data: {\n        labels: [],\n        datasets: [\n            {\n                label: \"Cisnienie\",\n                borderColor: 'rgba(57,97,184,0.8)',\n                borderWidth: 2,\n                fill: false,\n                data: [],\n                pointRadius: 2,\n            }\n        ]\n    }\n};\n\n\nfor (let i = 0; i < temp[0].length; i = i + (temp[0].length/100)) {\n    \n    let idx = parseInt(i)\n    console.log(idx);\n    m.data.datasets[0].data.push(temp[0][idx]);\n    // Zamień spację na literę \"T\" i dodaj sufiks \"Z\"\n    let str_date = timeV[0][idx].replace(\" \", \"T\") + \"+01:00\";\n\n    // Utwórz obiekt Date na podstawie przekształconego stringa\n    let dateV = new Date(str_date);\n    m.data.labels.push(dateV.toLocaleString()) }\n\nmsg.payload = m;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2080,
        "wires": [
            [
                "151c2aaf2ecae103"
            ]
        ]
    },
    {
        "id": "1b22f90ac5153c0b",
        "type": "function",
        "z": "2c9593d1d1b303dd",
        "name": "soilMoistureChart",
        "func": "function getGetOrdinal(n) {\n    var s=[\"th\",\"st\",\"nd\",\"rd\"],\n    v=n%100;\n    return n+(s[(v-20)%10]||s[v]||s[0]);\n }\nlet r = msg.payload;\n\nlet temp = [r.map(v => parseFloat(v.moilSoilture))];\nlet timeV = [r.map(v =>v.date)];\n    \n\n\n\nvar dL = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nvar dS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nvar mL = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nvar mS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n\nlet now = new Date();\n\n// Create the chart object\nlet m = {\n    type: 'line',\n    options: {\n        title: {\n            display: true,\n            text: 'Wykres wilgotnosci gleby w czasie'\n        },\n        legend: {\n            display: true,\n        },\n        chartArea: {\n            backgroundColor: 'rgba(255, 255, 255, 0.9)',\n            borderColor: 'rgba(0, 0, 0, 0.1)',\n            borderWidth: 1,\n        },\n        scales: {\n            xAxes: [{\n                scaleLabel: {\n                    display: true,\n                    labelString: 'Czas'\n                },\n                ticks: {\n                    autoSkip: true,\n                    maxTicksLimit: 10\n                }\n            }],\n            yAxes: [{\n                scaleLabel: {\n                    display: true,\n                    labelString: 'wilgotnosc gleby w %'\n                }\n            }]\n        },\n        plugins: {\n            datalabels: {\n                display: false,\n                backgroundColor: 'whitesmoke',\n                borderRadius: 1,\n                padding: 1,\n                align: 'right',\n                anchor: function (context) {\n                    if (context.dataIndex == context.dataset.data.length - 1) {\n                        return 'center';\n                    } else {\n                        return 'end';\n                    }\n                },\n                offset: 8,\n                formatter: function (value) {\n                    return value > 0 ? value.toLocaleString() : '';\n                }\n            }\n        }\n    },\n    data: {\n        labels: [],\n        datasets: [\n            {\n                label: \"moilSoilture\",\n                borderColor: 'rgba(57,97,184,0.8)',\n                borderWidth: 2,\n                fill: false,\n                data: [],\n                pointRadius: 2,\n            }\n        ]\n    }\n};\n\n\nfor (let i = 0; i < temp[0].length; i = i + (temp[0].length/100)) {\n    \n    let idx = parseInt(i)\n    console.log(idx);\n    m.data.datasets[0].data.push(temp[0][idx]);\n    // Zamień spację na literę \"T\" i dodaj sufiks \"Z\"\n    let str_date = timeV[0][idx].replace(\" \", \"T\") + \"+01:00\";\n\n    // Utwórz obiekt Date na podstawie przekształconego stringa\n    let dateV = new Date(str_date);\n    m.data.labels.push(dateV.toLocaleString()) }\n\nmsg.payload = m;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 2180,
        "wires": [
            [
                "14ab2d3ed2b8dee3"
            ]
        ]
    },
    {
        "id": "10bbbf3fda785722",
        "type": "function",
        "z": "2c9593d1d1b303dd",
        "name": "humidityChart",
        "func": "function getGetOrdinal(n) {\n    var s=[\"th\",\"st\",\"nd\",\"rd\"],\n    v=n%100;\n    return n+(s[(v-20)%10]||s[v]||s[0]);\n }\nlet r = msg.payload;\n\nlet temp = [r.map(v => parseFloat(v.humidity))];\nlet timeV = [r.map(v =>v.date)];\n    \n\n\n\nvar dL = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nvar dS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nvar mL = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nvar mS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n\nlet now = new Date();\n\n// Create the chart object\nlet m = {\n    type: 'line',\n    options: {\n        title: {\n            display: true,\n            text: 'Wykres wilgotnosci powietrza w czasie'\n        },\n        legend: {\n            display: true,\n        },\n        chartArea: {\n            backgroundColor: 'rgba(255, 255, 255, 0.9)',\n            borderColor: 'rgba(0, 0, 0, 0.1)',\n            borderWidth: 1,\n        },\n        scales: {\n            xAxes: [{\n                scaleLabel: {\n                    display: true,\n                    labelString: 'Czas'\n                },\n                ticks: {\n                    autoSkip: true,\n                    maxTicksLimit: 10\n                }\n            }],\n            yAxes: [{\n                scaleLabel: {\n                    display: true,\n                    labelString: 'Wilgotnosc w %'\n                }\n            }]\n        },\n        plugins: {\n            datalabels: {\n                display: false,\n                backgroundColor: 'whitesmoke',\n                borderRadius: 1,\n                padding: 1,\n                align: 'right',\n                anchor: function (context) {\n                    if (context.dataIndex == context.dataset.data.length - 1) {\n                        return 'center';\n                    } else {\n                        return 'end';\n                    }\n                },\n                offset: 8,\n                formatter: function (value) {\n                    return value > 0 ? value.toLocaleString() : '';\n                }\n            }\n        }\n    },\n    data: {\n        labels: [],\n        datasets: [\n            {\n                label: \"humidity\",\n                borderColor: 'rgba(57,97,184,0.8)',\n                borderWidth: 2,\n                fill: false,\n                data: [],\n                pointRadius: 2,\n            }\n        ]\n    }\n};\n\n\nfor (let i = 0; i < temp[0].length; i = i + (temp[0].length/100)) {\n    \n    let idx = parseInt(i)\n    console.log(idx);\n    m.data.datasets[0].data.push(temp[0][idx]);\n    // Zamień spację na literę \"T\" i dodaj sufiks \"Z\"\n    let str_date = timeV[0][idx].replace(\" \", \"T\") + \"+01:00\";\n\n    // Utwórz obiekt Date na podstawie przekształconego stringa\n    let dateV = new Date(str_date);\n    m.data.labels.push(dateV.toLocaleString()) }\n\nmsg.payload = m;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2260,
        "wires": [
            [
                "6461036896d6f20f"
            ]
        ]
    },
    {
        "id": "f7aaff8bb9797946",
        "type": "delay",
        "z": "2c9593d1d1b303dd",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 820,
        "y": 2120,
        "wires": [
            [
                "034d59bc54cff204"
            ]
        ]
    },
    {
        "id": "e4b1ac83bcc34645",
        "type": "delay",
        "z": "2c9593d1d1b303dd",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 840,
        "y": 2180,
        "wires": [
            [
                "034d59bc54cff204"
            ]
        ]
    },
    {
        "id": "05cc1642e961a503",
        "type": "delay",
        "z": "2c9593d1d1b303dd",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 840,
        "y": 2260,
        "wires": [
            [
                "034d59bc54cff204"
            ]
        ]
    },
    {
        "id": "dab6b28ed332c7f7",
        "type": "ui_toast",
        "z": "2c9593d1d1b303dd",
        "position": "bottom right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1520,
        "y": 2120,
        "wires": []
    },
    {
        "id": "dcb6ec47acb366fe",
        "type": "template",
        "z": "2c9593d1d1b303dd",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Pobrano raport",
        "output": "str",
        "x": 1400,
        "y": 2240,
        "wires": [
            [
                "dab6b28ed332c7f7"
            ]
        ]
    },
    {
        "id": "2db0ec41edce7e98",
        "type": "function",
        "z": "2c9593d1d1b303dd",
        "name": "temperature bargraph",
        "func": "let r = msg.payload;\n\nlet wilgotnoscPowietrza = r.map((v) => parseFloat(v.temperature));\n//let wilgotnoscPowietrza = [50, 60, 70, 75, 80, 85, 90, 92, 95, 98, 100];\n\n// Funkcja do grupowania danych w zakresy\nfunction groupData(data, rangeSize) {\n    let groupedData = {};\n    data.forEach((value) => {\n        let rangeKey = Math.floor(value * 10 / rangeSize) * rangeSize;\n        if (!groupedData[rangeKey]) {\n            groupedData[rangeKey] = 0;\n        }\n        groupedData[rangeKey]++;\n    });\n    return groupedData;\n}\nlet size = (\n    (Math.max(...wilgotnoscPowietrza) - Math.min(...wilgotnoscPowietrza)) / 5\n);\n\n// Grupowanie danych w zakresy o szerokości 10\nlet groupedData = groupData(wilgotnoscPowietrza, size * 10);\n\n// Konwersja danych do formatu zrozumiałego dla Chart.js\nlet labels = Object.keys(groupedData).map(\n    (rangeKey) => `${rangeKey}-${parseInt(rangeKey) + 10}`\n);\n// Przeskalowanie etykiet na osi X o 100 mniejsze\nlabels = labels.map((label) => (parseFloat(label) * 0.1).toFixed(2));\nlet data = Object.values(groupedData);\n\n// Inicjalizacja obiektu wykresu kolumnowego\nlet histogramChart = {\n    type: \"bar\",\n    data: {\n        labels: labels,\n        datasets: [\n            {\n                label: \"Temperatura powietrza\",\n                data: data,\n                backgroundColor: \"rgba(57,97,184,0.8)\",\n            },\n        ],\n    },\n    options: {\n        title: {\n            display: true,\n            text: \"Histogram temperatury Powietrza\",\n        },\n        scales: {\n            xAxes: [\n                {\n                    scaleLabel: {\n                        display: true,\n                        labelString: \"Zakresy temperatury\",\n                    },\n                },\n            ],\n            yAxes: [\n                {\n                    scaleLabel: {\n                        display: true,\n                        labelString: \"Liczba wystąpień\",\n                    },\n                    ticks: {\n                        beginAtZero: true,\n                        stepSize: 1, // Ustawienie kroku osi Y na 1\n                    },\n                },\n            ],\n        },\n    },\n};\nmsg.payload = histogramChart;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2480,
        "wires": [
            [
                "f95e1fa3db45501d"
            ]
        ]
    },
    {
        "id": "f95e1fa3db45501d",
        "type": "chart-image",
        "z": "2c9593d1d1b303dd",
        "name": "",
        "width": 500,
        "height": "500",
        "x": 510,
        "y": 2420,
        "wires": [
            [
                "4f0eb06ef3058b53"
            ]
        ]
    },
    {
        "id": "4f0eb06ef3058b53",
        "type": "base64",
        "z": "2c9593d1d1b303dd",
        "name": "Encode",
        "action": "",
        "property": "payload",
        "x": 560,
        "y": 2540,
        "wires": [
            [
                "b386c7fc5c7c9b48"
            ]
        ]
    },
    {
        "id": "6209b2368bd55c0c",
        "type": "function",
        "z": "2c9593d1d1b303dd",
        "name": "soil bargraph",
        "func": "// Przykładowe dane o wilgotności powietrza\nlet r = msg.payload;\n\nlet wilgotnoscPowietrza = r.map((v) => parseFloat(v.moilSoilture));\n\n// Funkcja do grupowania danych w zakresy\nfunction groupData(data, rangeSize) {\n    let groupedData = {};\n    data.forEach((value) => {\n        let rangeKey = Math.floor(value / rangeSize) * rangeSize;\n        if (!groupedData[rangeKey]) {\n            groupedData[rangeKey] = 0;\n        }\n        groupedData[rangeKey]++;\n    });\n    return groupedData;\n}\n\nlet minWilgotnosc = Math.min(...wilgotnoscPowietrza);\nlet maxWilgotnosc = Math.max(...wilgotnoscPowietrza);\n\nlet size = Math.floor((maxWilgotnosc - minWilgotnosc) / 5);\n\n// Grupowanie danych w zakresy o dostosowanej szerokości\nlet groupedData = groupData(wilgotnoscPowietrza, size);\n\n// Konwersja danych do formatu zrozumiałego dla Chart.js\nlet labels = Object.keys(groupedData).map(\n    (rangeKey) => `${rangeKey}-${parseInt(rangeKey) + size}`\n);\nlet data = Object.values(groupedData);\n\n// Inicjalizacja obiektu wykresu kolumnowego\nlet histogramChart = {\n    type: \"bar\",\n    data: {\n        labels: labels,\n        datasets: [\n            {\n                label: \"Wilgotność gleby\",\n                data: data,\n                backgroundColor: \"rgba(57,97,184,0.8)\",\n            },\n        ],\n    },\n    options: {\n        title: {\n            display: true,\n            text: \"Histogram Wilgotności gleby\",\n        },\n        scales: {\n            xAxes: [\n                {\n                    scaleLabel: {\n                        display: true,\n                        labelString: \"Zakresy Wilgotności gleby\",\n                    },\n                },\n            ],\n            yAxes: [\n                {\n                    scaleLabel: {\n                        display: true,\n                        labelString: \"Liczba wystąpień\",\n                    },\n                    ticks: {\n                        beginAtZero: true,\n                        stepSize: 1, // Ustawienie kroku osi Y na 1\n                    },\n                },\n            ],\n        },\n    },\n};\nmsg.payload = histogramChart;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 2720,
        "wires": [
            [
                "64edeae3dcb3922a"
            ]
        ]
    },
    {
        "id": "64edeae3dcb3922a",
        "type": "chart-image",
        "z": "2c9593d1d1b303dd",
        "name": "",
        "width": 500,
        "height": "500",
        "x": 510,
        "y": 2680,
        "wires": [
            [
                "e9e6dcc38816b10a"
            ]
        ]
    },
    {
        "id": "e9e6dcc38816b10a",
        "type": "base64",
        "z": "2c9593d1d1b303dd",
        "name": "Encode",
        "action": "",
        "property": "payload",
        "x": 420,
        "y": 2800,
        "wires": [
            [
                "4b950d01f61c7a42"
            ]
        ]
    },
    {
        "id": "cc18f87b97f833f6",
        "type": "function",
        "z": "2c9593d1d1b303dd",
        "name": "pressure bargraph",
        "func": "let r = msg.payload;\n\nlet wilgotnoscPowietrza = r.map((v) => parseFloat(v.pressure));\n//let wilgotnoscPowietrza = [50, 60, 70, 75, 80, 85, 90, 92, 95, 98, 100];\nconsole.log(Math.max(...wilgotnoscPowietrza))\n// Funkcja do grupowania danych w zakresy\nfunction groupData(data, rangeSize) {\n    let groupedData = {};\n    data.forEach((value) => {\n        let rangeKey = Math.floor(value * 100 / rangeSize) * rangeSize;\n        if (!groupedData[rangeKey]) {\n            groupedData[rangeKey] = 0;\n        }\n        groupedData[rangeKey]++;\n    });\n    return groupedData;\n}\nlet size = (\n    (Math.max(...wilgotnoscPowietrza) - Math.min(...wilgotnoscPowietrza)) / 5\n);\nconsole.log(size)\n// Grupowanie danych w zakresy o szerokości 10\nlet groupedData = groupData(wilgotnoscPowietrza, Math.floor(size * 100));\n\n// Konwersja danych do formatu zrozumiałego dla Chart.js\nlet labels = Object.keys(groupedData).map(\n    (rangeKey) => `${rangeKey}-${parseInt(rangeKey) + 10}`\n);\n// Przeskalowanie etykiet na osi X o 100 mniejsze\nlabels = labels.map((label) => (parseFloat(label) * 0.01).toFixed(2));\nlet data = Object.values(groupedData);\n\n// Inicjalizacja obiektu wykresu kolumnowego\nlet histogramChart = {\n    type: \"bar\",\n    data: {\n        labels: labels,\n        datasets: [\n            {\n                label: \"Ciśnienie powietrza\",\n                data: data,\n                backgroundColor: \"rgba(57,97,184,0.8)\",\n            },\n        ],\n    },\n    options: {\n        title: {\n            display: true,\n            text: \"Histogram cisnienia Powietrza\",\n        },\n        scales: {\n            xAxes: [\n                {\n                    scaleLabel: {\n                        display: true,\n                        labelString: \"Zakresy cisnienia\",\n                    },\n                },\n            ],\n            yAxes: [\n                {\n                    scaleLabel: {\n                        display: true,\n                        labelString: \"Liczba wystąpień\",\n                    },\n                    ticks: {\n                        beginAtZero: true,\n                        stepSize: 1, // Ustawienie kroku osi Y na 1\n                    },\n                },\n            ],\n        },\n    },\n};\nmsg.payload = histogramChart;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 2980,
        "wires": [
            [
                "90c6e48f6f1d9ae5"
            ]
        ]
    },
    {
        "id": "90c6e48f6f1d9ae5",
        "type": "chart-image",
        "z": "2c9593d1d1b303dd",
        "name": "",
        "width": 500,
        "height": "500",
        "x": 510,
        "y": 2940,
        "wires": [
            [
                "cd1005b6af7e1772"
            ]
        ]
    },
    {
        "id": "cd1005b6af7e1772",
        "type": "base64",
        "z": "2c9593d1d1b303dd",
        "name": "Encode",
        "action": "",
        "property": "payload",
        "x": 520,
        "y": 3040,
        "wires": [
            [
                "35d43cf9e25abacc"
            ]
        ]
    },
    {
        "id": "b386c7fc5c7c9b48",
        "type": "delay",
        "z": "2c9593d1d1b303dd",
        "name": "",
        "pauseType": "delay",
        "timeout": "6",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 700,
        "y": 2620,
        "wires": [
            [
                "034d59bc54cff204"
            ]
        ]
    },
    {
        "id": "4b950d01f61c7a42",
        "type": "delay",
        "z": "2c9593d1d1b303dd",
        "name": "",
        "pauseType": "delay",
        "timeout": "7",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 700,
        "y": 2800,
        "wires": [
            [
                "034d59bc54cff204"
            ]
        ]
    },
    {
        "id": "35d43cf9e25abacc",
        "type": "delay",
        "z": "2c9593d1d1b303dd",
        "name": "",
        "pauseType": "delay",
        "timeout": "8",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 680,
        "y": 3060,
        "wires": [
            [
                "034d59bc54cff204"
            ]
        ]
    },
    {
        "id": "6c36b7f0242fd27e",
        "type": "ui_spacer",
        "z": "2c9593d1d1b303dd",
        "name": "spacer",
        "group": "21d989ee5d860ab1",
        "order": 2,
        "width": 17,
        "height": 1
    },
    {
        "id": "cd6c6109aa9a1058",
        "type": "ui_spacer",
        "z": "2c9593d1d1b303dd",
        "name": "spacer",
        "group": "21d989ee5d860ab1",
        "order": 3,
        "width": 17,
        "height": 1
    },
    {
        "id": "4960f8f25b960edf",
        "type": "ui_spacer",
        "z": "2c9593d1d1b303dd",
        "name": "spacer",
        "group": "21d989ee5d860ab1",
        "order": 4,
        "width": 17,
        "height": 1
    },
    {
        "id": "2097563973f75dba",
        "type": "ui_spacer",
        "z": "2c9593d1d1b303dd",
        "name": "spacer",
        "group": "7f25d72094a43b2c",
        "order": 2,
        "width": 6,
        "height": 1
    },
    {
        "id": "db46c06b3fba6e48",
        "type": "ui_spacer",
        "z": "2c9593d1d1b303dd",
        "name": "spacer",
        "group": "7f25d72094a43b2c",
        "order": 3,
        "width": 6,
        "height": 1
    },
    {
        "id": "3fc4bcf6e398be11",
        "type": "ui_spacer",
        "z": "2c9593d1d1b303dd",
        "name": "spacer",
        "group": "7f25d72094a43b2c",
        "order": 4,
        "width": 6,
        "height": 1
    },
    {
        "id": "b8b66d5e18561739",
        "type": "ui_spacer",
        "z": "2c9593d1d1b303dd",
        "name": "spacer",
        "group": "7f25d72094a43b2c",
        "order": 5,
        "width": 6,
        "height": 1
    },
    {
        "id": "4971b6260c28d82d",
        "type": "ui_spacer",
        "z": "2c9593d1d1b303dd",
        "name": "spacer",
        "group": "7f25d72094a43b2c",
        "order": 6,
        "width": 6,
        "height": 1
    },
    {
        "id": "e1c40cc35180f3ce",
        "type": "ui_spacer",
        "z": "2c9593d1d1b303dd",
        "name": "spacer",
        "group": "7f25d72094a43b2c",
        "order": 7,
        "width": 6,
        "height": 1
    },
    {
        "id": "7ca3cb608de9d7d8",
        "type": "ui_spacer",
        "z": "2c9593d1d1b303dd",
        "name": "spacer",
        "group": "7f25d72094a43b2c",
        "order": 8,
        "width": 6,
        "height": 1
    },
    {
        "id": "aa69b41f709cb585",
        "type": "ui_spacer",
        "z": "2c9593d1d1b303dd",
        "name": "spacer",
        "group": "7f25d72094a43b2c",
        "order": 9,
        "width": 6,
        "height": 1
    },
    {
        "id": "83cee4a0b87eac4e",
        "type": "ui_spacer",
        "z": "2c9593d1d1b303dd",
        "name": "spacer",
        "group": "7f25d72094a43b2c",
        "order": 10,
        "width": 6,
        "height": 1
    },
    {
        "id": "e3c0a9b522f1c8d1",
        "type": "ui_spacer",
        "z": "2c9593d1d1b303dd",
        "name": "spacer",
        "group": "7f25d72094a43b2c",
        "order": 11,
        "width": 6,
        "height": 1
    },
    {
        "id": "1c3f2edcf9aae042",
        "type": "ui_spacer",
        "z": "2c9593d1d1b303dd",
        "name": "spacer",
        "group": "7f25d72094a43b2c",
        "order": 12,
        "width": 6,
        "height": 1
    },
    {
        "id": "3eaac5a9b7aaf361",
        "type": "ui_spacer",
        "z": "2c9593d1d1b303dd",
        "name": "spacer",
        "group": "7f25d72094a43b2c",
        "order": 13,
        "width": 6,
        "height": 1
    },
    {
        "id": "21d989ee5d860ab1",
        "type": "ui_group",
        "name": "Zakres czasowy",
        "tab": "554856aecc7a31b7",
        "order": 1,
        "disp": true,
        "width": 17,
        "collapse": true,
        "className": ""
    },
    {
        "id": "a94c2155e352c42e",
        "type": "MySQLdatabase",
        "name": "",
        "host": "db4free.net",
        "port": "3306",
        "db": "cspdatabase",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "7f25d72094a43b2c",
        "type": "ui_group",
        "name": "Group 2",
        "tab": "554856aecc7a31b7",
        "order": 2,
        "disp": true,
        "width": "24",
        "collapse": false,
        "className": ""
    },
    {
        "id": "554856aecc7a31b7",
        "type": "ui_tab",
        "name": "Raport",
        "icon": "chrome_reader_mode",
        "order": 9,
        "disabled": false,
        "hidden": false
    }
]